using namespace edm;
  Nevt++;

  irun = iEvent.id().run();
  ilumi = iEvent.luminosityBlock();
  
  ievt = iEvent.id().event();
  
  if (isMC) {
	  
	bool lhe_pdf = false;
	  
	#ifdef LHAPDF
    edm::Handle<LHEEventProduct> EvtHandle ;
    iEvent.getByToken( lheEventProductToken_ , EvtHandle ) ;
		
		if(EvtHandle.isValid()){
			lhe_pdf = true;
			if(lhe_pdf){
		for ( unsigned int weightIndex = 0; weightIndex < EvtHandle->weights().size(); ++weightIndex ) {
			if (weightIndex>=9 && weightIndex<=109) {
				pdfwt[weightIndex-9] = EvtHandle->weights()[weightIndex].wgt/EvtHandle->originalXWGTUP(); 
				}
			}
		}
			
	}
	
	#elif defined(GenPDF)

		 if(!(lhe_pdf)){	 
			 edm::Handle<GenEventInfoProduct> GenHandle;
			 iEvent.getByToken(GenEventProductToken_,GenHandle);
			 if(GenHandle.isValid()){
				 const std::vector<double>& genweights = GenHandle->weights();
				 for ( unsigned int weightIndex = 0; weightIndex < GenHandle->weights().size(); ++weightIndex ) {
						if (weightIndex>=10 && weightIndex<=110) {
						pdfwt[weightIndex-10] = genweights[weightIndex]*1./genweights[10]; 
					}
				 }
			 }
		}
	
	#endif
	  	  
	wtfact = 1. ;

    edm::Handle<GenEventInfoProduct>eventinfo ;
    
    iEvent.getByToken(tok_wt_,eventinfo) ;
    
    if (eventinfo.isValid()){
      wtfact = weight2*eventinfo->weight();
      event_weight = eventinfo->weight();
      pthat = eventinfo->qScale();
    } 
  } //isMC 

  for (int ij=0; ij<nHLTmx; ij++) { 
	  weighttrg[ij] = 1.0;
	  }

/*  if (Nevt%1000==1)*/ cout <<"HOinPFAlgo::analyze "<< Nevt<<" "<<iEvent.id().run()<<" "<<iEvent.id().event()<<" "<<iTag<<" "<<jtptthr<<endl;
   
  Handle<double> Rho_PF;
  
  iEvent.getByToken(tok_Rho_,Rho_PF);
  Rho = *Rho_PF;
 
  const char* variab1;
   
  edm::Handle<edm::TriggerResults> trigRes;
  iEvent.getByToken(triggerBits_, trigRes);
  
  const edm::TriggerNames &names = iEvent.triggerNames(*trigRes);

  edm::Handle<pat::TriggerObjectStandAloneCollection> triggerObjects;
  iEvent.getByToken(triggerObjects_, triggerObjects);
  
  edm::Handle<pat::PackedTriggerPrescales> triggerPrescales;
  iEvent.getByToken(triggerPrescales_, triggerPrescales);
  
  //Calcualte Trigger Efficiency;
  
  int ihlttrg[nHLTmx+1]= {0,0,0,0,0,0,0,0,0,0,0};

  for (int jk=0; jk<nHLTmx; jk++) {
    for(unsigned ij = 0; ij<trigRes->size(); ++ij) {
      std::string name = names.triggerName(ij);
      variab1 = name.c_str(); 
      
       if (strstr(variab1,jethlt_name[jk]) && ((strlen(variab1)-strlen(jethlt_name[jk]))<5))
        {
		if ((trigRes->accept(ij))||(isMC)) {
			ihlttrg[jk] = ihlttrg[nHLTmx] = 1;
			}
        }
     }//ij 
    }//jk

  if (!isMC) {
    if (ihlttrg[nHLTmx]>0){
			wtfact = 1.0;///compres[ihlt];
		  } else { return ; } 
		}
  
  npu_vert = 0;

  if (isMC) { 
	  
    edm::Handle<std::vector<PileupSummaryInfo> > PupInfo;
    iEvent.getByToken(pileup_, PupInfo);
    int npu = -1;
    if (PupInfo.isValid()) {
      std::vector<PileupSummaryInfo>::const_iterator PVI;
      for(PVI = PupInfo->begin(); PVI != PupInfo->end(); ++PVI) {
		if (PVI->getBunchCrossing()==0) {
			npu = PVI->getPU_NumInteractions();
			break;
		}
      }
    }

   npu_vert = npu;
   
    }//isMC
   else {  if(ihlttrg[nHLTmx]==0) { return; } }
   
 
  Handle<VertexCollection> primaryVertices;
  
  iEvent.getByToken(tok_primaryVertices_, primaryVertices); 
 
   nvert = 0;
   nchict = 0;

  if (primaryVertices.isValid()) {
    int ndofct_org=0;
    int nchict_org=0;
    int nvert_org = 0;
    for (reco::VertexCollection::const_iterator vert=primaryVertices->begin(); vert<primaryVertices->end(); vert++) {
      nvert_org++;
      if (vert->isValid() && !vert->isFake()) {
	if (vert->ndof()>7) { 
	  ndofct_org++;
	  if (vert->normalizedChi2()<5) nchict_org++;
		}
      }
    }
    
    nvert = nvert_org;
    nchict = nchict_org;
    
    nprim = min(99,nvert) + 100*min(99,ndofct_org) + 10000*min(99,nchict);
}  
  
  edm::Handle<edm::View<pat::Jet>/*reco::PFJetCollection*/> PFJets[nalgo];
  edm::Handle<reco::GenJetCollection> GenJets[nalgo];

  vector<double> recojetptx[nalgo][njecmcmx];
  vector<double> recojetptxx[nalgo][njecmcmx];
  vector<double> recojetscl[nalgo][njecmcmx];
  vector<double> recojetjecL1[nalgo][njecmcmx];
  vector<double> recojetjec[nalgo][njecmcmx];
  vector<int> recojetindx[nalgo][njecmcmx];

	for(int ix=0; ix<nalgo; ix++){
	
	iEvent.getByToken(tok_pfjets_[ix], PFJets[ix]);
	iEvent.getByToken(tok_genjets_[ix], GenJets[ix]);
	
	for (unsigned jet = 0; jet<PFJets[ix]->size(); jet++) {
	  
	  HepLorentzVector pfjet4v((*PFJets[ix])[jet].px(),(*PFJets[ix])[jet].py(),(*PFJets[ix])[jet].pz(), (*PFJets[ix])[jet].energy());
	  
	  double tmprecpt = pfjet4v.perp();
	  double tmpreceta = pfjet4v.eta();
	  double tmprecphi = pfjet4v.phi();
	  double tmprecarea = (*PFJets[ix])[jet].jetArea();
	 
	  double total_cor = 1. ;
	  double corL1 = 1.;
	  
	  if(ix<=5){
	  
	  jecL1FastAK4->setJetPt(tmprecpt); 
	  jecL1FastAK4->setJetA(tmprecarea);
          jecL1FastAK4->setRho(*Rho_PF);
          jecL1FastAK4->setJetEta(tmpreceta);
      
      double corFactorL1Fast = jecL1FastAK4->getCorrection();
      total_cor*= corFactorL1Fast;
      tmprecpt = tmprecpt * corFactorL1Fast;
      corL1 = corL1 * corFactorL1Fast;
      
      jecL2RelativeAK4->setJetPt(tmprecpt);
      jecL2RelativeAK4->setJetEta(tmpreceta);
      
      double corFactorL2Relative = jecL2RelativeAK4->getCorrection();
      total_cor*= corFactorL2Relative ;
      tmprecpt = tmprecpt * corFactorL2Relative;
      
      jecL3AbsoluteAK4->setJetPt(tmprecpt); 
      jecL3AbsoluteAK4->setJetEta(tmpreceta);
	  
	  double corFactorL3Absolute = jecL3AbsoluteAK4->getCorrection();
	  total_cor*= corFactorL3Absolute ;
	  tmprecpt = tmprecpt * corFactorL3Absolute;
	  
	  if(!isMC){
		  double corFactorL2L3Residual;
		  
		  jecL2L3ResidualAK4->setJetPt(tmprecpt);
		  jecL2L3ResidualAK4->setJetEta(tmpreceta);
    
		  corFactorL2L3Residual = jecL2L3ResidualAK4->getCorrection();
		  total_cor*= corFactorL2L3Residual;
                  tmprecpt *=corFactorL2L3Residual;
		  }
	  	}//ix<=5
	  	else{
			        jecL1FastAK8->setJetPt(tmprecpt); 
				jecL1FastAK8->setJetA(tmprecarea);
				jecL1FastAK8->setRho(*Rho_PF);
				jecL1FastAK8->setJetEta(tmpreceta);
      
				double corFactorL1Fast = jecL1FastAK8->getCorrection();
				total_cor*= corFactorL1Fast;
				tmprecpt = tmprecpt * corFactorL1Fast;
			
				corL1 = corL1 * corFactorL1Fast;
      
				jecL2RelativeAK8->setJetPt(tmprecpt);
				jecL2RelativeAK8->setJetEta(tmpreceta);
      
				double corFactorL2Relative = jecL2RelativeAK8->getCorrection();
				total_cor*= corFactorL2Relative ;
				tmprecpt = tmprecpt * corFactorL2Relative;
      
				jecL3AbsoluteAK8->setJetPt(tmprecpt); 
				jecL3AbsoluteAK8->setJetEta(tmpreceta);
	  
				double corFactorL3Absolute = jecL3AbsoluteAK8->getCorrection();
				total_cor*= corFactorL3Absolute ;
				tmprecpt = tmprecpt * corFactorL3Absolute;
	  
				if(!isMC){
				double corFactorL2L3Residual;
		  
				jecL2L3ResidualAK8->setJetPt(tmprecpt);
				jecL2L3ResidualAK8->setJetEta(tmpreceta);
    
				corFactorL2L3Residual = jecL2L3ResidualAK8->getCorrection();
				total_cor*= corFactorL2L3Residual;
				tmprecpt *=corFactorL2L3Residual;
				}
			}//else  
	  	  
	  	  
	 // 	  cout<<"algo"<<ix+1<<" jet "<<jet+1<<" correction factor "<<total_cor<<endl;
	  	  
	 double gausreso[njecmcmx] = {0};
	  	  
	  for(int isrc =0 ; isrc<njecmcmx; isrc++){
		  
		  double sup = 1.0 ;
		  
		  #ifdef JETEnergyScale
		  
		  if((isrc>0)&&(isrc<=nsrc)){
				JetCorrectionUncertainty *jecUnc = vsrc[isrc-1];
				jecUnc->setJetEta(tmpreceta);
				jecUnc->setJetPt(tmprecpt);
	
				sup += jecUnc->getUncertainty(true);
			}
			else if(isrc>nsrc){
				JetCorrectionUncertainty *jecUnc = vsrc[isrc-1-nsrc];
				jecUnc->setJetEta(tmpreceta);
				jecUnc->setJetPt(tmprecpt);
	
				sup -= jecUnc->getUncertainty(false);
				}
		 
		 #elif defined(JETRESO)	

			JME::JetResolution resolution;

			if(ix<=5){	resolution = JME::JetResolution("Summer16_25nsV1_MC_PtResolution_AK4PFchs.txt"); }  // resolution file 
				else  { resolution = JME::JetResolution("Summer16_25nsV1_MC_PtResolution_AK8PFchs.txt"); }
	  
				JME::JetResolutionScaleFactor res_sf;

			if(ix<=5){	 res_sf = JME::JetResolutionScaleFactor("Summer16_25nsV1_MC_SF_AK4PFchs.txt"); }    //scale factor file
				else  {  res_sf = JME::JetResolutionScaleFactor("Summer16_25nsV1_MC_SF_AK8PFchs.txt");}
      
				double reso = 1 ;
		 
				JME::JetParameters parameters_5 = {{JME::Binning::JetPt, tmprecpt}, {JME::Binning::JetEta, tmpreceta}, {JME::Binning::Rho, *Rho_PF}};
				double rp = resolution.getResolution(parameters_5);
				double sf = res_sf.getScaleFactor({{JME::Binning::JetEta, tmpreceta}}, Variation::NOMINAL);
				double sf_up= res_sf.getScaleFactor({{JME::Binning::JetEta, tmpreceta}}, Variation::UP);
				double sf_dn= res_sf.getScaleFactor({{JME::Binning::JetEta, tmpreceta}}, Variation::DOWN);

		        bool match = false;
		        int match_gen = -1;
		        
		        for (unsigned get = 0; get<(GenJets[ix]->size()); get++) {
				HepLorentzVector genjet4v((*GenJets[ix])[get].px(),(*GenJets[ix])[get].py(),(*GenJets[ix])[get].pz(), (*GenJets[ix])[get].energy());
				if((delta2R(tmpreceta,tmprecphi,genjet4v.eta(),genjet4v.phi()) < (0.5*jetsize[ix])) &&(fabs(tmprecpt-genjet4v.perp())<(3*fabs(rp)*tmprecpt))){
					match = true;
					match_gen = get;
					break;
					}
				}
			
//				match = false;////Not Using Linear Scaling
				
				if(match&&(match_gen>=0)){
					if(isrc==0) { reso = (sf-1.)*(tmprecpt-(*GenJets[ix])[match_gen].pt())*1./tmprecpt;}
					else if(isrc==1){ reso = (sf_up-1.)*(tmprecpt-(*GenJets[ix])[match_gen].pt())*1./tmprecpt;}
					else if(isrc==2){ reso = (sf_dn-1.)*(tmprecpt-(*GenJets[ix])[match_gen].pt())*1./tmprecpt;}
					}
		        else{
				if(isrc==0) { gausreso[isrc] = gRandom->Gaus(0.,rp); }
				else { gausreso[isrc] = gasureso[0]; }
				if(isrc==0) { reso = sqrt(max(0.,(sf*sf-1))) * gausreso[isrc]; }
				else if(isrc==1) {reso = sqrt(max(0.,(sf_up*sf_up-1))) * gausreso[isrc]; }
				else if(isrc==2) {reso = sqrt(max(0.,(sf_dn*sf_dn-1))) * gausreso[isrc]; }	
			    }
	
				sup = 1.+reso;
				
		 	    #endif
				
				if((total_cor<1.e-7)||(total_cor>1.e3)){total_cor = 1.;}
				
				recojetptxx[ix][isrc].push_back(sup*tmprecpt);
				recojetptx[ix][isrc].push_back(tmprecpt);
				recojetscl[ix][isrc].push_back(sup);
				recojetindx[ix][isrc].push_back(jet);
				recojetjec[ix][isrc].push_back(total_cor);
				recojetjecL1[ix][isrc].push_back(corL1);
		 
//				if(ix==7) { cout<<JetRad[ix]<<" isrc "<<isrc<<" pt "<<tmprecpt<<endl;}
 
			} // loop over isrc
		} // loop over jet no
	} // loop over ix
	
	// now shuffle 
	
	for(int ix=0 ; ix<nalgo; ix++) { 
	    for (int isrc = 0; isrc < njecmcmx; isrc++) {
	 	if(recojetptxx[ix][isrc].size()>1) { 
		for (unsigned int ij=0; ij<recojetptxx[ix][isrc].size()-1; ij++) {
			for (unsigned int jk=ij+1; jk<recojetptxx[ix][isrc].size(); jk++) {
				
				if (recojetptx[ix][isrc][jk]>recojetptx[ix][isrc][ij]) {
					
					double tmpptx = recojetptxx[ix][isrc][ij];
					double tmppt = recojetptx[ix][isrc][ij];
					double tmpscl = recojetscl[ix][isrc][ij];
					double tmpjec = recojetjec[ix][isrc][ij];
					double tmpL1 = recojetjecL1[ix][isrc][ij];
					int tmpindx = recojetindx[ix][isrc][ij];

					recojetptxx[ix][isrc][ij] = recojetptxx[ix][isrc][jk];
					recojetptx[ix][isrc][ij] = recojetptx[ix][isrc][jk];
					recojetscl[ix][isrc][ij] = recojetscl[ix][isrc][jk];
					recojetjec[ix][isrc][ij] = recojetjec[ix][isrc][jk];
					recojetjecL1[ix][isrc][ij] = recojetjecL1[ix][isrc][jk];
					recojetindx[ix][isrc][ij] = recojetindx[ix][isrc][jk];					
		
					recojetptxx[ix][isrc][jk] = tmpptx;
					recojetptx[ix][isrc][jk] = tmppt;
					recojetscl[ix][isrc][jk] = tmpscl;
					recojetjec[ix][isrc][jk] = tmpjec;
					recojetjecL1[ix][isrc][jk] = tmpL1;
					recojetindx[ix][isrc][jk] = tmpindx;
				  }
			  } //jk
		  } //ij
	 	}
   	} // nsrc	
 }// loop over ix (algo no)

  edm::Handle<pat::METCollection> pfmet_ ; 
  iEvent.getByToken(tok_mets_,pfmet_) ;
  
  miset = misphi = sumEt = -1000 ;
  
  if(pfmet_.isValid()){
	  miset = pfmet_->begin()->corPt();
	  misphi = pfmet_->begin()->corPhi(); 
	  sumEt = pfmet_->begin()->corSumEt() ; 
	  if(sumEt<1.) { sumEt = 1.; } 
	  }
	 

  for(int ix=0 ; ix<nalgo ; ix++) {
	  
    npfjets[ix] = 0;
   
    if(PFJets[ix].isValid()) {

      for (unsigned jet1 = 0; jet1<PFJets[ix]->size(); jet1++) {

        int jet = recojetindx[ix][0][jet1];
        
	HepLorentzVector jet4v((*PFJets[ix])[jet].px(),(*PFJets[ix])[jet].py(),(*PFJets[ix])[jet].pz(), (*PFJets[ix])[jet].energy());
	jet4v *= recojetjec[ix][0][jet1] ;

	double jec_factor = recojetjec[ix][0][jet1];
	double jec_L1 = recojetjecL1[ix][0][jet1];
	double scale_factor = recojetscl[ix][0][jet1];

        double tmppt = jet4v.perp();
        double tmpeta = jet4v.eta();
        double tmpy = jet4v.rapidity();

  	if (abs(tmpy)>maxEta || tmppt<minPFPt) continue;
    
	//Jet ID =================
	double NHF = (*PFJets[ix])[jet].neutralHadronEnergyFraction();
	double NEMF = (*PFJets[ix])[jet].neutralEmEnergyFraction();
	double CHF = (*PFJets[ix])[jet].chargedHadronEnergyFraction();
	double CEMF = (*PFJets[ix])[jet].chargedEmEnergyFraction();
	double MUF = (*PFJets[ix])[jet].muonEnergyFraction();
	double PHF = (*PFJets[ix])[jet].photonEnergyFraction();
	int NumConst = (*PFJets[ix])[jet].chargedMultiplicity()+(*PFJets[ix])[jet].neutralMultiplicity();
	int NumNeutralParticles =(*PFJets[ix])[jet].neutralMultiplicity();
	int CHM = (*PFJets[ix])[jet].chargedHadronMultiplicity();
	int NHM = (*PFJets[ix])[jet].neutralHadronMultiplicity();
	int MUM = (*PFJets[ix])[jet].muonMultiplicity();
	int PHM = (*PFJets[ix])[jet].photonMultiplicity();
	int CEMM =(*PFJets[ix])[jet].chargedMultiplicity()-(*PFJets[ix])[jet].chargedHadronMultiplicity()-(*PFJets[ix])[jet].muonMultiplicity();
	int NEMM =(*PFJets[ix])[jet].neutralMultiplicity()-(*PFJets[ix])[jet].neutralHadronMultiplicity();

	bool looseJetID = false;
	bool tightJetID =false;
//	bool tightlepVeto = false;
	
	if(abs(tmpeta)<=2.7){
		if( (NHF<0.90 && NEMF<0.90 && NumConst>1) && ((abs(tmpeta)<=2.4 && CHF>0 && CHM>0 && CEMF<0.99) || (abs(tmpeta)>2.4)) ){
			tightJetID = true;
			}
		if( (NHF<0.99 && NEMF<0.99 && NumConst>1) && ((abs(tmpeta)<=2.4 && CHF>0 && CHM>0 && CEMF<0.99) || (abs(tmpeta)>2.4)) && (abs(tmpeta)<=2.7) ){
			looseJetID = true;
			}
	//	if( (NHF<0.90 && NEMF<0.90 && NumConst>1 && MUF<0.8) && ((abs(tmpeta)<=2.4 && CHF>0 && CHM>0 && CEMF<0.9) || (abs(tmpeta)>2.4)) && (abs(tmpeta)<=2.7) ){
	//		tightlepVeto = true;
	//		}		
		}
		else{
			if((abs(tmpeta)>2.7)&&(abs(tmpeta)<3.0)){
				#ifdef Data2015 
				 if( (NEMF<0.90) && (NumNeutralParticles>2)){tightJetID = true; looseJetID = true; } 
				#elif defined(Data2016)   
				if( (NEMF>0.01) && (NHF<0.98) && (NumNeutralParticles>2)){tightJetID = true; looseJetID = true; } 
				#endif
				}
				else{
					if ((NEMF<0.90) /*&& (NumNeutralParticles>10)*/){tightJetID = true; looseJetID = true;}
					}
			}
	
	pfjettightID[ix][npfjets[ix]] = tightJetID;
	pfjetlooseID[ix][npfjets[ix]] = looseJetID;
	pfjetSF[ix][npfjets[ix]] = scale_factor;//RESO scale_factor;
        pfjetJEC[ix][npfjets[ix]] = jec_factor;
        pfjetJECL1[ix][npfjets[ix]] = jec_L1;
/*	if( jet1==0 && !tightJetID) break;
	if (!tightJetID) continue;
*/
	pfjetmom[ix][npfjets[ix]] = jet4v.rho();
	pfjetpT[ix][npfjets[ix]] = jet4v.perp();
	pfjetenr[ix][npfjets[ix]] = jet4v.e();
	pfjetthe[ix][npfjets[ix]] = jet4v.theta();
	pfjety[ix][npfjets[ix]] = jet4v.rapidity();
	pfjetphi[ix][npfjets[ix]]= jet4v.phi();
	pfjetarea[ix][npfjets[ix]] = (*PFJets[ix])[jet].jetArea() ;  

	float jetmoment = 0;
    std::vector<reco::CandidatePtr> daught((*PFJets[ix])[jet].daughterPtrVector());
    std::sort(daught.begin(), daught.end(), [](const reco::CandidatePtr &p1, const reco::CandidatePtr &p2)
    { return p1->pt() > p2->pt(); });
    for (unsigned int i2 = 0; i2< daught.size(); ++i2) {
                jetmoment +=  (daught[i2])->pt() * delta2R((*daught[i2]).rapidity(), (*daught[i2]).phi(), pfjety[ix][npfjets[ix]], pfjetphi[ix][npfjets[ix]]);
        }
        pfjetwidth[ix][npfjets[ix]] = jetmoment*1./pfjetpT[ix][npfjets[ix]];
	
	pfjetpTup[ix][npfjets[ix]] = recojetptx[ix][1][jet1] ;
	pfjetpTdn[ix][npfjets[ix]] = recojetptx[ix][2][jet1] ;

	pfjetSFup[ix][npfjets[ix]] = recojetscl[ix][1][jet1] ;
        pfjetSFdn[ix][npfjets[ix]] = recojetscl[ix][2][jet1] ;
	
	if (++npfjets[ix] >=njetmx) break;
 
    }//jet1
   }//PFenJets[ix].isValid()  
    
    if (isMC) {
      
      ngenjets[ix] = 0;
   //   iEvent.getByToken(tok_genjets_[ix], GenJets[ix]);
 
      if (GenJets[ix].isValid()) {
	
		for (unsigned jet = 0; jet<GenJets[ix]->size(); jet++) {
		
		HepLorentzVector genjet4v((*GenJets[ix])[jet].px(),(*GenJets[ix])[jet].py(),(*GenJets[ix])[jet].pz(), (*GenJets[ix])[jet].energy());
		
		double tmpgenpt = genjet4v.perp();
	//  double tmpgeneta = genjet4v.eta();
		double tmpgeny = genjet4v.rapidity();
	
		if (abs(tmpgeny)>maxEta || tmpgenpt<minPFPt) continue;

		genjetmom[ix][ngenjets[ix]] = genjet4v.rho() ;
		genjetpT[ix][ngenjets[ix]] = genjet4v.perp() ;
		genjetenr[ix][ngenjets[ix]] = genjet4v.e() ;
		genjetthe[ix][ngenjets[ix]] = genjet4v.theta();
		genjety[ix][ngenjets[ix]] = genjet4v.rapidity();
		genjetphi[ix][ngenjets[ix]]= genjet4v.phi();
		genjetarea[ix][ngenjets[ix]] = (*GenJets[ix])[jet].jetArea() ;
	  
	  
			if (++ngenjets[ix] >=njetmx) break;
	
		}//jet
    
       
     } //if (GenJets[ix].isValid())
 
		} //isMC
    
 } //for(int ix=0 ; ix<nalgo ; ++ix) 

